generator client {
  provider      = "prisma-client-js"
  output        = "app/generated/prisma/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model User {
  id                     String         @id @default(auto()) @map("_id") @db.ObjectId
  name                   String?
  email                  String?        @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  bio                    String?
  location               String?
  rating                 Float?         @default(0.0)
  tradeCount             Int            @default(0)
  conversationsAsOfferer Conversation[] @relation("Offerer")
  conversationsAsOwner   Conversation[] @relation("Owner")
  accounts               Account[]
  sessions               Session[]
  listings               Listing[]
  messages               Message[]
  Offers                 Offer[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model Listing {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  images          String[]
  category        String
  condition       String         @default("good")
  tradePreference String?
  location        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  ownerId         String         @db.ObjectId
  offers          Offer[]
  conversations   Conversation[]

  owner User @relation(fields: [ownerId], references: [id])
}

model Offer {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  listingId      String      @db.ObjectId
  senderId       String      @db.ObjectId
  initialMessage String?
  createdAt      DateTime    @default(now())
  status         OfferStatus @default(PENDING)

  listing      Listing       @relation(fields: [listingId], references: [id])
  sender       User          @relation(fields: [senderId], references: [id])
  conversation Conversation?

  @@index([listingId, senderId])
}

model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  offerId   String    @unique @db.ObjectId
  listingId String    @db.ObjectId
  offererId String    @db.ObjectId
  ownerId   String    @db.ObjectId
  createdAt DateTime  @default(now())
  messages  Message[]

  offer   Offer   @relation(fields: [offerId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])
  offerer User    @relation("Offerer", fields: [offererId], references: [id])
  owner   User    @relation("Owner", fields: [ownerId], references: [id])

  @@unique([listingId, offererId], name: "listingId_offererId")
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  senderId       String   @db.ObjectId
  text           String
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation(fields: [senderId], references: [id])
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  UNDER_NEGOTIATION
}
